#pragma once

#define MAX_OBJECT_POINTS 256
#define MAX_NUM_TRIANGLES 64;

#define PRIMITIVE_STATE_ACTIVE 0
#define PRIMITIVE_STATE_NON_ACTIVE 1

#define PRIMITIVE_MODE_WIREFRAME 0
#define PRIMITIVE_MODE_PURE_COLOR 1
#define PRIMITIVE_MODE_TEXTURE 2

typedef struct RenColor
{
	unsigned char red;
	unsigned char green;
	unsigned char blue;
	unsigned char alpha;
}RenColor, * RenColorPtr;

typedef struct RenPoint2D
{
	float x, y;
}RenPoint2D, * RenPoint2DPtr;

typedef struct RenPoint3D
{
	float x, y, z;
	RenPoint3D(float x1, float y1, float z1, float w1)
	{
		x = x1; y = y1; z = z1; w = w1;
	}
}RenPoint3D, * RenPoint3DPtr;

typedef struct RenPoint4D
{
	float x, y, z, w;
	RenColor color;
	RenPoint4D(float x1, float y1, float z1, float w1, RenColor color1)
	{
		x = x1; y = y1; z = z1; w = w1; color = color1;
	}
}RenPoint4D, * RenPoint4DPtr;

typedef struct RenLine2D
{
	RenPoint2D p1, p2;
}RenLine2D, * RenLine2DPtr;

typedef struct RenLine3D
{
	RenPoint3D p1, p2;
}RenLine3D, RenVector3D, * RenLine3DPtr;

typedef struct RenLine4D
{
	RenPoint4D p1, p2;
}RenLine4D, RenVector4D, * RenLine4DPtr;

typedef struct RenMatrix4D
{
	float M[4][4];
}RenMatrix4D, * RenMatrix4DPtr;

typedef struct RenTriangle
{
	int pointIndex[3];
	int texIndex[3];
	RenVector3D normal;
	RenPoint4DPtr pointListPtr;
	RenTextilePtr textureListPtr;
	float angleWithSunLight;
	RenTriangle (int pi1, int pi2, int pi3, int ti1, int ti2, int ti3)
	{
		pointIndex[0] = pi1; pointIndex[1] = pi2; pointIndex[2] = pi3;
		texIndex[0] = ti1; texIndex[1] = ti2; texIndex[2] = ti3;
	}

}RenTriangle, * RenTrianglePtr;

typedef struct RenPrimitive
{
	RenPoint4D p[3];
	RenTexture t[3];
	RenColor c; // used for wireframe mode
	RenVector3D normal;
	BitMapPtr *map;
	int renderMode;
	int state;
	float angleWithSunLight;
}RenPrimitive, * RenPrimitivePtr;

typedef struct RenTexture
{
	float u, v;
	RenTexture (float u1, float v1)
	{
		u = u1; v = v1;
	}
}RenTexture, *RenTexturePtr;

typedef struct RenCamera
{
	RenPoint4D location;
	RenVector4D up, forward, right;
	float zn, zf;
	RenMatrix4D cameraTrans;
}

typedef struct RenObject
{
	char name[64];
	RenPoint4D pointList[MAX_OBJECT_POINTS];
	RenPoint4D transferredPointList[MAX_OBJECT_POINTS];
	RenTexture textureList[MAX_NUM_TEXTURES];
	RenTriangle triangleList[MAX_NUM_TRIANGLES];
	//RenTriangle transferredTriangleList[MAX_NUM_TRIANGLES];
	int numberOfPoints;
	int numberOfTriangles;
	float maxRadius;
}RenObject, * RenObjectPtr;